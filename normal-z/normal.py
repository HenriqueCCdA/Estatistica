from math import pi, sqrt, exp, erf
from scipy.special import erfinv


class Norm(object):

    def __init__(self, mu: float = 0.e0, sigma: float = 1.e0):
        '''
        ***********************************************************
        data criacao:     29/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        construtor: funcao densidade de probabilidade normal
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        mu - media
        sigma - desvia de padrao
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da pdf para z
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''
        self.__mu: float = mu
        self.__sigma: float = sigma

    def z(self, x: float) -> float:
        '''
        ***********************************************************
        data criacao:     30/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        z : calculo do paramentro z
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        x     - valor x
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor de z             
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''
        return (x - self.__mu)/self.__sigma


    def pdf(self, x: float) -> float:
        '''
        ***********************************************************
        data criacao:     29/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        pdf: funcao densidade de probabilidade normal
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        x     - valor x
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da pdf para z
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''

        z: float = self.z(x)

        return self.__pdf_z(z)

    def __pdf_z(self, z: float) -> float:
        '''
        ***********************************************************
        data criacao:     30/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        pdf_z: funcao densidade de probabilidade normal padrao
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        z     - valor z
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da pdf para z
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''

        mpi: float = pi

        return (1.e0/sqrt(2.e0*mpi))*exp(-0.5*z*z)

    def cdf_num(self, x: float) -> float:
        '''
        ***********************************************************
        data criacao:     29/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        cdf_num: calculo da funcao a densidade de probabilidade
        acumulada por integracao numerica
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        x - valor x
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da cdf para x
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''

        z: float = self.z(x)

        if z == 0.0:
            return 0.5
        elif z > 0.0:
            p = Norm.__integral(self.__pdf_z, 0.0, z)
            return 0.5 + p
        else:
            p = Norm.__integral(self.__pdf_z, 0.0, -z)

            return 0.5 - p

    def cdf_erf(self, x: float) -> float:
        '''
        ***********************************************************
        data criacao:     29/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        cdf_erf: calculo da funcao a densidade de probabilidade
        acumulada pela funcao de erro
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        x - valor x
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da cdf para x
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''

        z: float = self.z(x)

        if z == 0.0:
            return 0.5
        elif z > 0.0:
            p: float = 0.5e0*erf(z/sqrt(2.0))
            return 0.5 + p
        else:
            p: float = 0.5e0*erf(-z/sqrt(2.0))
            return 0.5 - p

    def ppf(self, p: float) -> float:
        '''
        ***********************************************************
        data criacao:     30/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        ppf: calcula a funcao cdf inversa
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        p - probabilidade p
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da cdf para x
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        Caclula o valor de x para uma dada probabilidade
        ***********************************************************
        '''

        if p == 0.5e0:
            return 0.e0
        elif p > 0.5:
            p2: float = p - 0.5e0
            z: float = erfinv(2.e0*p2)*sqrt(2.e0)
        else:
            p2: float = 0.5e0 - p
            z: float = -erfinv(2.e0*p2)*sqrt(2.e0)

        return z*self.__sigma + self.__mu

    @staticmethod
    def __integral(func, a: float, b: float, n: int = 100000) -> float:
        '''
        ***********************************************************
        data criacao:     30/06/2020
        data modificacao: 00/00/0000
        -----------------------------------------------------------
        __integral: integral numerica (regra do 1/3 simpson)
        -----------------------------------------------------------
        Entrada:
        -----------------------------------------------------------
        func - funcao que vc que integrar
        a    - limite inferior
        b    - limite superior
        n    - numero de divisoes
        -----------------------------------------------------------
        Saida:
        -----------------------------------------------------------
        retorna o valor da integral
        -----------------------------------------------------------
        OBS:
        -----------------------------------------------------------
        ***********************************************************
        '''

        h: float = (b - a)/n
        suma: float = func(0.0)
        x: float = h

        for i in range(1, n):
            x += h
            if i % 2 == 0:
                suma += 2.e0*func(x)
            else:
                suma += 4.e0*func(x)

        return (h/3.0)*suma


